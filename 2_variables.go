/** Declaraci칩n, uso y convenciones de variables

Una variable puede ser vista como un contenedor de informaci칩n en nuestro programa.
Al igual que otros lenguajes de programaci칩n como C/C++ o Java, Go posee tipado est치tico:

	Al incializar una variable con un tipo de dato en espec칤fico, este no puede variar.
*/
package main

import(
	"fmt"
	"strings"
)

/** Constantes
Las constantes son 칰tiles para definir valores que no cambiar치n a lo largo del programa.
Son de acceso m치s eficiente y suelen ir al nivel del paquete.
*/
const participante = "Jimena"
const numeroDeLaSuerte float32 = 12

func main() {

	fmt.Println(participante, numeroDeLaSuerte)

	// Declaraci칩n de variables con un valor inicial
	var entero int = 10
	var flotante float32 = 10.121
	var cadena string = "hola"
	var booleano bool = true
	var caracter rune = '游땕'

	fmt.Println(entero, flotante, cadena, booleano, string(caracter))

	// Declaraci칩n de variables sin un valor inicial
	// Al no tener un valor inicial, toman un valor por defecto.
	// 춰En Go no existen las variables vac칤as!
	var enteroDefault int
	var flotanteDefault float32
	var cadenaDefault string
	var booleanoDefault bool
	var caracterDefault rune

	fmt.Println(enteroDefault, flotanteDefault, cadenaDefault, booleanoDefault, string(caracterDefault))

	// Inferencia de tipo 
	// Usando el operador := es posible inferir el tipo a partir de la asignaci칩n.
	nombre := "Juan"
	edad := 12
	salario := 12341.1

	var localidad = "Tepatitl치n"

	fmt.Println(nombre, edad, "a침os, gana", salario, "en", localidad)

	/** PUNTEROS
	
	Al igual que otros lenguajes de programaci칩n Go tiene el concepto de punteros

	Un puntero es una variable que almacena la direcci칩n de memoria donde se ubica 
	un valor.

	UTILIDAD
	+ Valor por referencia. Es m치s barato utilizar referencias que copias de valores.
	+ Modificaci칩n de valores. Si una funci칩n recibe un puntero como par치metro, 
		toda modificaci칩n que se haga a dicha variable se realizar치 tambi칠n en la original.
	
	DESVENTAJAS
	- Complejidad a침adida al programa.
	- M치s suceptible a bugs extra침os.
	- No es recomendable para novatos.
	*/

	var miCadena string = "Hola mundo"

	var puntero *string = &miCadena

	fmt.Println("Direcci칩n de memoria: ", puntero, "Valor: ", *puntero)

	// Como 'puntero' es una referencia a 'miCadena', toda modificaci칩n que
	// se realice desde 'puntero' se ver치 reflejada en 'miCadena'.
	fmt.Println(miCadena)

	*puntero = strings.ToUpper(*puntero)

	fmt.Println(miCadena)

	// Es posible cambiar la referencia de un puntero

	fmt.Println(puntero, *puntero)

	var miCadena2 string = "Adios Mundo"
	puntero = &miCadena2

	fmt.Println(puntero, *puntero)
}